// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Erg.proto

#ifndef PROTOBUF_Erg_2eproto__INCLUDED
#define PROTOBUF_Erg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace EasyErgsocket {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Erg_2eproto();
void protobuf_AssignDesc_Erg_2eproto();
void protobuf_ShutdownFile_Erg_2eproto();

class Erg;

enum ErgType {
  ROW = 0,
  BIKE = 1,
  RUN = 2,
  OTHER = 3
};
bool ErgType_IsValid(int value);
const ErgType ErgType_MIN = ROW;
const ErgType ErgType_MAX = OTHER;
const int ErgType_ARRAYSIZE = ErgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErgType_descriptor();
inline const ::std::string& ErgType_Name(ErgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErgType_descriptor(), value);
}
inline bool ErgType_Parse(
    const ::std::string& name, ErgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErgType>(
    ErgType_descriptor(), name, value);
}
enum PlayerType {
  HUMAN = 0,
  BOT = 1,
  REPLAY = 2
};
bool PlayerType_IsValid(int value);
const PlayerType PlayerType_MIN = HUMAN;
const PlayerType PlayerType_MAX = REPLAY;
const int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor();
inline const ::std::string& PlayerType_Name(PlayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerType_descriptor(), value);
}
inline bool PlayerType_Parse(
    const ::std::string& name, PlayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
// ===================================================================

class Erg : public ::google::protobuf::Message {
 public:
  Erg();
  virtual ~Erg();

  Erg(const Erg& from);

  inline Erg& operator=(const Erg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Erg& default_instance();

  void Swap(Erg* other);

  // implements Message ----------------------------------------------

  Erg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Erg& from);
  void MergeFrom(const Erg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ergId = 1;
  inline bool has_ergid() const;
  inline void clear_ergid();
  static const int kErgIdFieldNumber = 1;
  inline const ::std::string& ergid() const;
  inline void set_ergid(const ::std::string& value);
  inline void set_ergid(const char* value);
  inline void set_ergid(const char* value, size_t size);
  inline ::std::string* mutable_ergid();
  inline ::std::string* release_ergid();
  inline void set_allocated_ergid(::std::string* ergid);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .EasyErgsocket.ErgType ergtype = 3;
  inline bool has_ergtype() const;
  inline void clear_ergtype();
  static const int kErgtypeFieldNumber = 3;
  inline ::EasyErgsocket::ErgType ergtype() const;
  inline void set_ergtype(::EasyErgsocket::ErgType value);

  // required .EasyErgsocket.PlayerType playertype = 4;
  inline bool has_playertype() const;
  inline void clear_playertype();
  static const int kPlayertypeFieldNumber = 4;
  inline ::EasyErgsocket::PlayerType playertype() const;
  inline void set_playertype(::EasyErgsocket::PlayerType value);

  // optional double distance = 5;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 5;
  inline double distance() const;
  inline void set_distance(double value);

  // optional double exerciseTime = 6;
  inline bool has_exercisetime() const;
  inline void clear_exercisetime();
  static const int kExerciseTimeFieldNumber = 6;
  inline double exercisetime() const;
  inline void set_exercisetime(double value);

  // optional uint32 cadence = 7;
  inline bool has_cadence() const;
  inline void clear_cadence();
  static const int kCadenceFieldNumber = 7;
  inline ::google::protobuf::uint32 cadence() const;
  inline void set_cadence(::google::protobuf::uint32 value);

  // optional uint32 paceInSecs = 8;
  inline bool has_paceinsecs() const;
  inline void clear_paceinsecs();
  static const int kPaceInSecsFieldNumber = 8;
  inline ::google::protobuf::uint32 paceinsecs() const;
  inline void set_paceinsecs(::google::protobuf::uint32 value);

  // optional uint32 calories = 9;
  inline bool has_calories() const;
  inline void clear_calories();
  static const int kCaloriesFieldNumber = 9;
  inline ::google::protobuf::uint32 calories() const;
  inline void set_calories(::google::protobuf::uint32 value);

  // optional uint32 power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // optional uint32 heartrate = 11;
  inline bool has_heartrate() const;
  inline void clear_heartrate();
  static const int kHeartrateFieldNumber = 11;
  inline ::google::protobuf::uint32 heartrate() const;
  inline void set_heartrate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EasyErgsocket.Erg)
 private:
  inline void set_has_ergid();
  inline void clear_has_ergid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ergtype();
  inline void clear_has_ergtype();
  inline void set_has_playertype();
  inline void clear_has_playertype();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_exercisetime();
  inline void clear_has_exercisetime();
  inline void set_has_cadence();
  inline void clear_has_cadence();
  inline void set_has_paceinsecs();
  inline void clear_has_paceinsecs();
  inline void set_has_calories();
  inline void clear_has_calories();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_heartrate();
  inline void clear_has_heartrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ergid_;
  ::std::string* name_;
  int ergtype_;
  int playertype_;
  double distance_;
  double exercisetime_;
  ::google::protobuf::uint32 cadence_;
  ::google::protobuf::uint32 paceinsecs_;
  ::google::protobuf::uint32 calories_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 heartrate_;
  friend void  protobuf_AddDesc_Erg_2eproto();
  friend void protobuf_AssignDesc_Erg_2eproto();
  friend void protobuf_ShutdownFile_Erg_2eproto();

  void InitAsDefaultInstance();
  static Erg* default_instance_;
};
// ===================================================================


// ===================================================================

// Erg

// required string ergId = 1;
inline bool Erg::has_ergid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Erg::set_has_ergid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Erg::clear_has_ergid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Erg::clear_ergid() {
  if (ergid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ergid_->clear();
  }
  clear_has_ergid();
}
inline const ::std::string& Erg::ergid() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.ergId)
  return *ergid_;
}
inline void Erg::set_ergid(const ::std::string& value) {
  set_has_ergid();
  if (ergid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ergid_ = new ::std::string;
  }
  ergid_->assign(value);
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.ergId)
}
inline void Erg::set_ergid(const char* value) {
  set_has_ergid();
  if (ergid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ergid_ = new ::std::string;
  }
  ergid_->assign(value);
  // @@protoc_insertion_point(field_set_char:EasyErgsocket.Erg.ergId)
}
inline void Erg::set_ergid(const char* value, size_t size) {
  set_has_ergid();
  if (ergid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ergid_ = new ::std::string;
  }
  ergid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EasyErgsocket.Erg.ergId)
}
inline ::std::string* Erg::mutable_ergid() {
  set_has_ergid();
  if (ergid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ergid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:EasyErgsocket.Erg.ergId)
  return ergid_;
}
inline ::std::string* Erg::release_ergid() {
  clear_has_ergid();
  if (ergid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ergid_;
    ergid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Erg::set_allocated_ergid(::std::string* ergid) {
  if (ergid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ergid_;
  }
  if (ergid) {
    set_has_ergid();
    ergid_ = ergid;
  } else {
    clear_has_ergid();
    ergid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:EasyErgsocket.Erg.ergId)
}

// required string name = 2;
inline bool Erg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Erg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Erg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Erg::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Erg::name() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.name)
  return *name_;
}
inline void Erg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.name)
}
inline void Erg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:EasyErgsocket.Erg.name)
}
inline void Erg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EasyErgsocket.Erg.name)
}
inline ::std::string* Erg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:EasyErgsocket.Erg.name)
  return name_;
}
inline ::std::string* Erg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Erg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:EasyErgsocket.Erg.name)
}

// required .EasyErgsocket.ErgType ergtype = 3;
inline bool Erg::has_ergtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Erg::set_has_ergtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Erg::clear_has_ergtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Erg::clear_ergtype() {
  ergtype_ = 0;
  clear_has_ergtype();
}
inline ::EasyErgsocket::ErgType Erg::ergtype() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.ergtype)
  return static_cast< ::EasyErgsocket::ErgType >(ergtype_);
}
inline void Erg::set_ergtype(::EasyErgsocket::ErgType value) {
  assert(::EasyErgsocket::ErgType_IsValid(value));
  set_has_ergtype();
  ergtype_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.ergtype)
}

// required .EasyErgsocket.PlayerType playertype = 4;
inline bool Erg::has_playertype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Erg::set_has_playertype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Erg::clear_has_playertype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Erg::clear_playertype() {
  playertype_ = 0;
  clear_has_playertype();
}
inline ::EasyErgsocket::PlayerType Erg::playertype() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.playertype)
  return static_cast< ::EasyErgsocket::PlayerType >(playertype_);
}
inline void Erg::set_playertype(::EasyErgsocket::PlayerType value) {
  assert(::EasyErgsocket::PlayerType_IsValid(value));
  set_has_playertype();
  playertype_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.playertype)
}

// optional double distance = 5;
inline bool Erg::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Erg::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Erg::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Erg::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double Erg::distance() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.distance)
  return distance_;
}
inline void Erg::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.distance)
}

// optional double exerciseTime = 6;
inline bool Erg::has_exercisetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Erg::set_has_exercisetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Erg::clear_has_exercisetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Erg::clear_exercisetime() {
  exercisetime_ = 0;
  clear_has_exercisetime();
}
inline double Erg::exercisetime() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.exerciseTime)
  return exercisetime_;
}
inline void Erg::set_exercisetime(double value) {
  set_has_exercisetime();
  exercisetime_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.exerciseTime)
}

// optional uint32 cadence = 7;
inline bool Erg::has_cadence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Erg::set_has_cadence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Erg::clear_has_cadence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Erg::clear_cadence() {
  cadence_ = 0u;
  clear_has_cadence();
}
inline ::google::protobuf::uint32 Erg::cadence() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.cadence)
  return cadence_;
}
inline void Erg::set_cadence(::google::protobuf::uint32 value) {
  set_has_cadence();
  cadence_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.cadence)
}

// optional uint32 paceInSecs = 8;
inline bool Erg::has_paceinsecs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Erg::set_has_paceinsecs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Erg::clear_has_paceinsecs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Erg::clear_paceinsecs() {
  paceinsecs_ = 0u;
  clear_has_paceinsecs();
}
inline ::google::protobuf::uint32 Erg::paceinsecs() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.paceInSecs)
  return paceinsecs_;
}
inline void Erg::set_paceinsecs(::google::protobuf::uint32 value) {
  set_has_paceinsecs();
  paceinsecs_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.paceInSecs)
}

// optional uint32 calories = 9;
inline bool Erg::has_calories() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Erg::set_has_calories() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Erg::clear_has_calories() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Erg::clear_calories() {
  calories_ = 0u;
  clear_has_calories();
}
inline ::google::protobuf::uint32 Erg::calories() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.calories)
  return calories_;
}
inline void Erg::set_calories(::google::protobuf::uint32 value) {
  set_has_calories();
  calories_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.calories)
}

// optional uint32 power = 10;
inline bool Erg::has_power() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Erg::set_has_power() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Erg::clear_has_power() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Erg::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 Erg::power() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.power)
  return power_;
}
inline void Erg::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.power)
}

// optional uint32 heartrate = 11;
inline bool Erg::has_heartrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Erg::set_has_heartrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Erg::clear_has_heartrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Erg::clear_heartrate() {
  heartrate_ = 0u;
  clear_has_heartrate();
}
inline ::google::protobuf::uint32 Erg::heartrate() const {
  // @@protoc_insertion_point(field_get:EasyErgsocket.Erg.heartrate)
  return heartrate_;
}
inline void Erg::set_heartrate(::google::protobuf::uint32 value) {
  set_has_heartrate();
  heartrate_ = value;
  // @@protoc_insertion_point(field_set:EasyErgsocket.Erg.heartrate)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EasyErgsocket

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EasyErgsocket::ErgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EasyErgsocket::ErgType>() {
  return ::EasyErgsocket::ErgType_descriptor();
}
template <> struct is_proto_enum< ::EasyErgsocket::PlayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EasyErgsocket::PlayerType>() {
  return ::EasyErgsocket::PlayerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Erg_2eproto__INCLUDED
