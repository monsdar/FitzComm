// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Erg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Erg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EasyErgsocket {

namespace {

const ::google::protobuf::Descriptor* Erg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Erg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Erg_2eproto() {
  protobuf_AddDesc_Erg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Erg.proto");
  GOOGLE_CHECK(file != NULL);
  Erg_descriptor_ = file->message_type(0);
  static const int Erg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, ergid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, ergtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, playertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, exercisetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, cadence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, paceinsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, calories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, heartrate_),
  };
  Erg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Erg_descriptor_,
      Erg::default_instance_,
      Erg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Erg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Erg));
  ErgType_descriptor_ = file->enum_type(0);
  PlayerType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Erg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Erg_descriptor_, &Erg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Erg_2eproto() {
  delete Erg::default_instance_;
  delete Erg_reflection_;
}

void protobuf_AddDesc_Erg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tErg.proto\022\rEasyErgsocket\"\373\001\n\003Erg\022\r\n\005er"
    "gId\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\'\n\007ergtype\030\003 \002(\016"
    "2\026.EasyErgsocket.ErgType\022-\n\nplayertype\030\004"
    " \002(\0162\031.EasyErgsocket.PlayerType\022\020\n\010dista"
    "nce\030\005 \001(\001\022\024\n\014exerciseTime\030\006 \001(\001\022\017\n\007caden"
    "ce\030\007 \001(\r\022\022\n\npaceInSecs\030\010 \001(\r\022\020\n\010calories"
    "\030\t \001(\r\022\r\n\005power\030\n \001(\r\022\021\n\theartrate\030\013 \001(\r"
    "*0\n\007ErgType\022\007\n\003ROW\020\000\022\010\n\004BIKE\020\001\022\007\n\003RUN\020\002\022"
    "\t\n\005OTHER\020\003*,\n\nPlayerType\022\t\n\005HUMAN\020\000\022\007\n\003B"
    "OT\020\001\022\n\n\006REPLAY\020\002", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Erg.proto", &protobuf_RegisterTypes);
  Erg::default_instance_ = new Erg();
  Erg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Erg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Erg_2eproto {
  StaticDescriptorInitializer_Erg_2eproto() {
    protobuf_AddDesc_Erg_2eproto();
  }
} static_descriptor_initializer_Erg_2eproto_;
const ::google::protobuf::EnumDescriptor* ErgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErgType_descriptor_;
}
bool ErgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerType_descriptor_;
}
bool PlayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Erg::kErgIdFieldNumber;
const int Erg::kNameFieldNumber;
const int Erg::kErgtypeFieldNumber;
const int Erg::kPlayertypeFieldNumber;
const int Erg::kDistanceFieldNumber;
const int Erg::kExerciseTimeFieldNumber;
const int Erg::kCadenceFieldNumber;
const int Erg::kPaceInSecsFieldNumber;
const int Erg::kCaloriesFieldNumber;
const int Erg::kPowerFieldNumber;
const int Erg::kHeartrateFieldNumber;
#endif  // !_MSC_VER

Erg::Erg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EasyErgsocket.Erg)
}

void Erg::InitAsDefaultInstance() {
}

Erg::Erg(const Erg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EasyErgsocket.Erg)
}

void Erg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ergid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ergtype_ = 0;
  playertype_ = 0;
  distance_ = 0;
  exercisetime_ = 0;
  cadence_ = 0u;
  paceinsecs_ = 0u;
  calories_ = 0u;
  power_ = 0u;
  heartrate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Erg::~Erg() {
  // @@protoc_insertion_point(destructor:EasyErgsocket.Erg)
  SharedDtor();
}

void Erg::SharedDtor() {
  if (ergid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ergid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Erg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Erg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Erg_descriptor_;
}

const Erg& Erg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Erg_2eproto();
  return *default_instance_;
}

Erg* Erg::default_instance_ = NULL;

Erg* Erg::New() const {
  return new Erg;
}

void Erg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Erg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ergtype_, paceinsecs_);
    if (has_ergid()) {
      if (ergid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ergid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(calories_, heartrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Erg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EasyErgsocket.Erg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ergId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ergid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ergid().data(), this->ergid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ergid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ergtype;
        break;
      }

      // required .EasyErgsocket.ErgType ergtype = 3;
      case 3: {
        if (tag == 24) {
         parse_ergtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EasyErgsocket::ErgType_IsValid(value)) {
            set_ergtype(static_cast< ::EasyErgsocket::ErgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playertype;
        break;
      }

      // required .EasyErgsocket.PlayerType playertype = 4;
      case 4: {
        if (tag == 32) {
         parse_playertype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EasyErgsocket::PlayerType_IsValid(value)) {
            set_playertype(static_cast< ::EasyErgsocket::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_distance;
        break;
      }

      // optional double distance = 5;
      case 5: {
        if (tag == 41) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_exerciseTime;
        break;
      }

      // optional double exerciseTime = 6;
      case 6: {
        if (tag == 49) {
         parse_exerciseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exercisetime_)));
          set_has_exercisetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cadence;
        break;
      }

      // optional uint32 cadence = 7;
      case 7: {
        if (tag == 56) {
         parse_cadence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cadence_)));
          set_has_cadence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_paceInSecs;
        break;
      }

      // optional uint32 paceInSecs = 8;
      case 8: {
        if (tag == 64) {
         parse_paceInSecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paceinsecs_)));
          set_has_paceinsecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_calories;
        break;
      }

      // optional uint32 calories = 9;
      case 9: {
        if (tag == 72) {
         parse_calories:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calories_)));
          set_has_calories();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_power;
        break;
      }

      // optional uint32 power = 10;
      case 10: {
        if (tag == 80) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_heartrate;
        break;
      }

      // optional uint32 heartrate = 11;
      case 11: {
        if (tag == 88) {
         parse_heartrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartrate_)));
          set_has_heartrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EasyErgsocket.Erg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EasyErgsocket.Erg)
  return false;
#undef DO_
}

void Erg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EasyErgsocket.Erg)
  // required string ergId = 1;
  if (has_ergid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ergid().data(), this->ergid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ergid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ergid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .EasyErgsocket.ErgType ergtype = 3;
  if (has_ergtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ergtype(), output);
  }

  // required .EasyErgsocket.PlayerType playertype = 4;
  if (has_playertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->playertype(), output);
  }

  // optional double distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->distance(), output);
  }

  // optional double exerciseTime = 6;
  if (has_exercisetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->exercisetime(), output);
  }

  // optional uint32 cadence = 7;
  if (has_cadence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cadence(), output);
  }

  // optional uint32 paceInSecs = 8;
  if (has_paceinsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->paceinsecs(), output);
  }

  // optional uint32 calories = 9;
  if (has_calories()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->calories(), output);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->power(), output);
  }

  // optional uint32 heartrate = 11;
  if (has_heartrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->heartrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EasyErgsocket.Erg)
}

::google::protobuf::uint8* Erg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EasyErgsocket.Erg)
  // required string ergId = 1;
  if (has_ergid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ergid().data(), this->ergid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ergid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ergid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .EasyErgsocket.ErgType ergtype = 3;
  if (has_ergtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ergtype(), target);
  }

  // required .EasyErgsocket.PlayerType playertype = 4;
  if (has_playertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->playertype(), target);
  }

  // optional double distance = 5;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->distance(), target);
  }

  // optional double exerciseTime = 6;
  if (has_exercisetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->exercisetime(), target);
  }

  // optional uint32 cadence = 7;
  if (has_cadence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cadence(), target);
  }

  // optional uint32 paceInSecs = 8;
  if (has_paceinsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->paceinsecs(), target);
  }

  // optional uint32 calories = 9;
  if (has_calories()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->calories(), target);
  }

  // optional uint32 power = 10;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->power(), target);
  }

  // optional uint32 heartrate = 11;
  if (has_heartrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->heartrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EasyErgsocket.Erg)
  return target;
}

int Erg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ergId = 1;
    if (has_ergid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ergid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .EasyErgsocket.ErgType ergtype = 3;
    if (has_ergtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ergtype());
    }

    // required .EasyErgsocket.PlayerType playertype = 4;
    if (has_playertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playertype());
    }

    // optional double distance = 5;
    if (has_distance()) {
      total_size += 1 + 8;
    }

    // optional double exerciseTime = 6;
    if (has_exercisetime()) {
      total_size += 1 + 8;
    }

    // optional uint32 cadence = 7;
    if (has_cadence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cadence());
    }

    // optional uint32 paceInSecs = 8;
    if (has_paceinsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paceinsecs());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 calories = 9;
    if (has_calories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calories());
    }

    // optional uint32 power = 10;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // optional uint32 heartrate = 11;
    if (has_heartrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Erg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Erg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Erg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Erg::MergeFrom(const Erg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ergid()) {
      set_ergid(from.ergid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ergtype()) {
      set_ergtype(from.ergtype());
    }
    if (from.has_playertype()) {
      set_playertype(from.playertype());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_exercisetime()) {
      set_exercisetime(from.exercisetime());
    }
    if (from.has_cadence()) {
      set_cadence(from.cadence());
    }
    if (from.has_paceinsecs()) {
      set_paceinsecs(from.paceinsecs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_calories()) {
      set_calories(from.calories());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_heartrate()) {
      set_heartrate(from.heartrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Erg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Erg::CopyFrom(const Erg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Erg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Erg::Swap(Erg* other) {
  if (other != this) {
    std::swap(ergid_, other->ergid_);
    std::swap(name_, other->name_);
    std::swap(ergtype_, other->ergtype_);
    std::swap(playertype_, other->playertype_);
    std::swap(distance_, other->distance_);
    std::swap(exercisetime_, other->exercisetime_);
    std::swap(cadence_, other->cadence_);
    std::swap(paceinsecs_, other->paceinsecs_);
    std::swap(calories_, other->calories_);
    std::swap(power_, other->power_);
    std::swap(heartrate_, other->heartrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Erg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Erg_descriptor_;
  metadata.reflection = Erg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EasyErgsocket

// @@protoc_insertion_point(global_scope)
